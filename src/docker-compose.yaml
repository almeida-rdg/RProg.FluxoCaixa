version: '3.9'

name: fluxo-caixa

networks:
  proxy-net:
    driver: bridge
  lancamentos-net:
    driver: bridge
  consolidado-net:
    driver: bridge
  rabbitmq-net:
    driver: bridge
  db-net:
    driver: bridge
  worker-net:
    driver: bridge

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: fluxo-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Your_password123
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    networks:
      - db-net
      - lancamentos-net
      - consolidado-net
      - worker-net
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./lancamentos/scripts/criar-banco.sql:/docker-entrypoint-initdb.d/01-criar-banco.sql
      - ./worker/scripts/criar-banco-consolidado.sql:/docker-entrypoint-initdb.d/02-criar-banco-consolidado.sql
    command: >
      /bin/bash -c "
      /opt/mssql/bin/sqlservr &

      until /opt/mssql-tools18/bin/sqlcmd -l 1 -C -S localhost -U sa -P 'Your_password123' -Q 'SELECT 1' &> /dev/null; do
        >&2 echo '>>>>>>>>>> SQL Server is unavailable - sleeping <<<<<<<<<<';
        sleep 5;
      done;
      echo '>>>>>>>>>> SQL Server is ready - executing init scripts <<<<<<<<<<';
      /opt/mssql-tools18/bin/sqlcmd -l 5 -C -S localhost -U sa -P 'Your_password123' -d master -i /docker-entrypoint-initdb.d/01-criar-banco.sql;
      /opt/mssql-tools18/bin/sqlcmd -l 5 -C -S localhost -U sa -P 'Your_password123' -d master -i /docker-entrypoint-initdb.d/02-criar-banco-consolidado.sql;
      
      sleep infinity;"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -l 1 -C -S localhost -U sa -P 'Your_password123' -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: fluxo-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq-net
      - lancamentos-net
      - consolidado-net
      - worker-net
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  lancamentos-api:
    build:
      context: ./lancamentos
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixa;User=sa;Password=Your_password123;TrustServerCertificate=True
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__QueueName=lancamentos
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
    ports:
      - "81:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lancamentos-net
      - rabbitmq-net
      - db-net
    volumes:
      - lancamentos_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      start_period: 60s

  consolidado-api:
    build:
      context: ./consolidado
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixaConsolidado;User=sa;Password=Your_password123;TrustServerCertificate=True
    ports:
      - "82:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - consolidado-net
      - db-net
    volumes:
      - consolidado_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixaConsolidado;User=sa;Password=Your_password123;TrustServerCertificate=True
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__PrefixoFila=lancamentos
      - RabbitMQ__QueueName=lancamentos
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - worker-net
      - rabbitmq-net
      - db-net
    volumes:
      - worker_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep dotnet || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: fluxo-proxy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8443
      - DOCKER_HOST=unix:///var/run/docker.sock
      - Yarp__Clusters__Lancamentos__Destinations__destination1__Address=http://lancamentos-api:8080/
      - Yarp__Clusters__Consolidado__Destinations__destination1__Address=http://consolidado-api:8080/
    ports:
      - "80:8080"
      - "443:8443"
    depends_on:
      lancamentos-api:
        condition: service_healthy
      consolidado-api:
        condition: service_healthy
    networks:
      - proxy-net
      - lancamentos-net
      - consolidado-net
    volumes:
      - proxy_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

# Configurações de escalabilidade automática
# Para monitoramento de recursos e escalabilidade automática, usar:
# 1. Docker Swarm mode para orchestração
# 2. Prometheus + Grafana para métricas
# 3. Scripts de auto-scaling baseados em CPU/Memória

# Comandos para inicializar em modo swarm:
# docker swarm init
# docker stack deploy -c docker-compose.yaml fluxocaixa

# Configurações de segurança:
# - Apenas o proxy está exposto externamente (portas 80 e 443)
# - Cada serviço tem sua própria rede + redes compartilhadas necessárias
# - Banco e RabbitMQ são acessíveis apenas pelos serviços que precisam
# - Health checks em todos os serviços para garantir disponibilidade
# - Restart policies para recuperação automática de falhas

volumes:
  sqlserver_data:
    driver: local
  rabbitmq_data:
    driver: local
  lancamentos_logs:
    driver: local
  consolidado_logs:
    driver: local
  worker_logs:
    driver: local
  proxy_logs:
    driver: local