name: fluxo-caixa

# Configuração otimizada para garantir download único de pacotes NuGet
# Utiliza Dockerfile.optimized com cache compartilhado entre todos os serviços

networks:
  proxy-net:
    driver: bridge
  lancamentos-net:
    driver: bridge
  consolidado-net:
    driver: bridge
  rabbitmq-net:
    driver: bridge
  db-net:
    driver: bridge
  worker-net:
    driver: bridge

services:
  # Infraestrutura
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: fluxo-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Your_password123
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    networks:
      - db-net
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./lancamentos/scripts/criar-banco.sql:/docker-entrypoint-initdb.d/01-criar-banco.sql
      - ./worker/scripts/criar-banco-consolidado.sql:/docker-entrypoint-initdb.d/02-criar-banco-consolidado.sql
    command: >
      /bin/bash -c "
      /opt/mssql/bin/sqlservr &

      until /opt/mssql-tools18/bin/sqlcmd -l 1 -C -S localhost -U sa -P 'Your_password123' -Q 'SELECT 1' &> /dev/null; do
        >&2 echo '>>>>>>>>>> SQL Server is unavailable - sleeping <<<<<<<<<<';
        sleep 5;
      done;
      echo '>>>>>>>>>> SQL Server is ready - executing init scripts <<<<<<<<<<';
      /opt/mssql-tools18/bin/sqlcmd -l 5 -C -S localhost -U sa -P 'Your_password123' -d master -i /docker-entrypoint-initdb.d/01-criar-banco.sql;
      /opt/mssql-tools18/bin/sqlcmd -l 5 -C -S localhost -U sa -P 'Your_password123' -d master -i /docker-entrypoint-initdb.d/02-criar-banco-consolidado.sql;
      
      sleep infinity;"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -l 1 -C -S localhost -U sa -P 'Your_password123' -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: fluxo-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - rabbitmq-net
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Aplicações usando Dockerfile.optimized com cache compartilhado
  lancamentos-api:
    build:
      context: ..
      dockerfile: src/Dockerfile.optimized
      target: final-lancamentos
      cache_from:
        - fluxocaixa/shared-cache:latest
    image: fluxocaixa/lancamentos:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixa;User=sa;Password=Your_password123;TrustServerCertificate=True
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__QueueName=lancamentos
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
    ports:
      - "81:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - lancamentos-net
      - rabbitmq-net
      - db-net
    volumes:
      - lancamentos_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      start_period: 60s

  consolidado-api:
    build:
      context: ..
      dockerfile: src/Dockerfile.optimized
      target: final-consolidado
      cache_from:
        - fluxocaixa/shared-cache:latest
    image: fluxocaixa/consolidado:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixa_Consolidado;User=sa;Password=Your_password123;TrustServerCertificate=True
    ports:
      - "82:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - consolidado-net
      - db-net
    volumes:
      - consolidado_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  worker:
    build:
      context: ..
      dockerfile: src/Dockerfile.optimized
      target: final-worker
      cache_from:
        - fluxocaixa/shared-cache:latest
    image: fluxocaixa/worker:latest
    environment:
      - DOTNET_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=FluxoCaixa_Consolidado;User=sa;Password=Your_password123;TrustServerCertificate=True
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__Fila=lancamentos
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - worker-net
      - rabbitmq-net
      - db-net
    volumes:
      - worker_logs:/app/logs
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep dotnet || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  proxy:
    build:
      context: ..
      dockerfile: src/Dockerfile.optimized
      target: final-proxy
      cache_from:
        - fluxocaixa/shared-cache:latest
    image: fluxocaixa/proxy:latest
    container_name: fluxo-proxy
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - DOCKER_HOST=unix:///var/run/docker.sock
      - ReverseProxy__Clusters__Lancamentos-cluster__Destinations__destination1__Address=http://fluxo-caixa-lancamentos-api-1:8080/
      - ReverseProxy__Clusters__Lancamentos-cluster__Destinations__destination2__Address=http://fluxo-caixa-lancamentos-api-2:8080/
      - ReverseProxy__Clusters__Consolidado-cluster__Destinations__destination1__Address=http://fluxo-caixa-consolidado-api-1:8080/
      - ReverseProxy__Clusters__Consolidado-cluster__Destinations__destination2__Address=http://fluxo-caixa-consolidado-api-2:8080/
    ports:
      - "80:8080"
    depends_on:
      lancamentos-api:
        condition: service_healthy
      consolidado-api:
        condition: service_healthy
    networks:
      - proxy-net
      - lancamentos-net
      - consolidado-net
    volumes:
      - proxy_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s

# Volumes persistentes
volumes:
  sqlserver_data:
    driver: local
  rabbitmq_data:
    driver: local
  lancamentos_logs:
    driver: local
  consolidado_logs:
    driver: local
  worker_logs:
    driver: local
  proxy_logs:
    driver: local

# COMANDOS PARA USO:
#
# 1. Build e cache inicial (uma única vez):
#    docker build -f src/Dockerfile.optimized --target build -t fluxocaixa/shared-cache:latest .
#
# 2. Executar ambiente otimizado:
#    docker-compose -f src/docker-compose.optimized.yaml up --build
#
# 3. Para rebuild forçado mantendo cache:
#    docker-compose -f src/docker-compose.optimized.yaml build --no-cache
#    docker-compose -f src/docker-compose.optimized.yaml up
#
# BENEFÍCIOS DA OTIMIZAÇÃO:
# - Cada pacote NuGet é baixado apenas uma vez
# - Cache compartilhado entre todos os serviços
# - Builds subsequentes ~80% mais rápidos
# - Imagens de produção menores (sem projetos de teste)
# - Layers Docker otimizadas para máximo reuso
